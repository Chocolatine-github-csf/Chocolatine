{"code":"export var FileSources;\n(function (FileSources) {\n    FileSources[\"local\"] = \"local\";\n    FileSources[\"firebase\"] = \"firebase\";\n    FileSources[\"openai\"] = \"openai\";\n    FileSources[\"s3\"] = \"s3\";\n    FileSources[\"vectordb\"] = \"vectordb\";\n})(FileSources || (FileSources = {}));\nexport var FileContext;\n(function (FileContext) {\n    FileContext[\"avatar\"] = \"avatar\";\n    FileContext[\"unknown\"] = \"unknown\";\n    FileContext[\"assistants\"] = \"assistants\";\n    FileContext[\"image_generation\"] = \"image_generation\";\n    FileContext[\"assistants_output\"] = \"assistants_output\";\n    FileContext[\"message_attachment\"] = \"message_attachment\";\n    FileContext[\"filename\"] = \"filename\";\n    FileContext[\"updatedAt\"] = \"updatedAt\";\n    FileContext[\"source\"] = \"source\";\n    FileContext[\"context\"] = \"context\";\n    FileContext[\"bytes\"] = \"bytes\";\n})(FileContext || (FileContext = {}));\n//# sourceMappingURL=files.js.map","references":[],"map":"{\"version\":3,\"file\":\"files.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/files.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,CAAN,IAAY,WAMX;AAND,WAAY,WAAW;IACrB,8BAAe,CAAA;IACf,oCAAqB,CAAA;IACrB,gCAAiB,CAAA;IACjB,wBAAS,CAAA;IACT,oCAAqB,CAAA;AACvB,CAAC,EANW,WAAW,KAAX,WAAW,QAMtB;AAED,MAAM,CAAN,IAAY,WAYX;AAZD,WAAY,WAAW;IACrB,gCAAiB,CAAA;IACjB,kCAAmB,CAAA;IACnB,wCAAyB,CAAA;IACzB,oDAAqC,CAAA;IACrC,sDAAuC,CAAA;IACvC,wDAAyC,CAAA;IACzC,oCAAqB,CAAA;IACrB,sCAAuB,CAAA;IACvB,gCAAiB,CAAA;IACjB,kCAAmB,CAAA;IACnB,8BAAe,CAAA;AACjB,CAAC,EAZW,WAAW,KAAX,WAAW,QAYtB\"}","dts":{"name":"/home/lau/dev-projects/Chocolatine/packages/data-provider/dist/types/types/files.d.ts","writeByteOrderMark":false,"text":"export declare enum FileSources {\n    local = \"local\",\n    firebase = \"firebase\",\n    openai = \"openai\",\n    s3 = \"s3\",\n    vectordb = \"vectordb\"\n}\nexport declare enum FileContext {\n    avatar = \"avatar\",\n    unknown = \"unknown\",\n    assistants = \"assistants\",\n    image_generation = \"image_generation\",\n    assistants_output = \"assistants_output\",\n    message_attachment = \"message_attachment\",\n    filename = \"filename\",\n    updatedAt = \"updatedAt\",\n    source = \"source\",\n    context = \"context\",\n    bytes = \"bytes\"\n}\nexport type EndpointFileConfig = {\n    disabled?: boolean;\n    fileLimit?: number;\n    fileSizeLimit?: number;\n    totalSizeLimit?: number;\n    supportedMimeTypes?: RegExp[];\n};\nexport type FileConfig = {\n    endpoints: {\n        [key: string]: EndpointFileConfig;\n    };\n    serverFileSizeLimit?: number;\n    avatarSizeLimit?: number;\n    checkType?: (fileType: string, supportedTypes: RegExp[]) => boolean;\n};\nexport type TFile = {\n    _id?: string;\n    __v?: number;\n    user: string;\n    conversationId?: string;\n    message?: string;\n    file_id: string;\n    temp_file_id?: string;\n    bytes: number;\n    embedded: boolean;\n    filename: string;\n    filepath: string;\n    object: 'file';\n    type: string;\n    usage: number;\n    context?: FileContext;\n    source?: FileSources;\n    width?: number;\n    height?: number;\n    expiresAt?: string | Date;\n    preview?: string;\n    createdAt?: string | Date;\n    updatedAt?: string | Date;\n};\nexport type TFileUpload = TFile & {\n    temp_file_id: string;\n};\nexport type AvatarUploadResponse = {\n    url: string;\n};\nexport type UploadMutationOptions = {\n    onSuccess?: (data: TFileUpload, variables: FormData, context?: unknown) => void;\n    onMutate?: (variables: FormData) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\nexport type UploadAvatarOptions = {\n    onSuccess?: (data: AvatarUploadResponse, variables: FormData, context?: unknown) => void;\n    onMutate?: (variables: FormData) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\nexport type DeleteFilesResponse = {\n    message: string;\n    result: Record<string, unknown>;\n};\nexport type BatchFile = {\n    file_id: string;\n    filepath: string;\n    embedded: boolean;\n    source: FileSources;\n};\nexport type DeleteFilesBody = {\n    files: BatchFile[];\n    assistant_id?: string;\n};\nexport type DeleteMutationOptions = {\n    onSuccess?: (data: DeleteFilesResponse, variables: DeleteFilesBody, context?: unknown) => void;\n    onMutate?: (variables: DeleteFilesBody) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: DeleteFilesBody, context?: unknown) => void;\n};\n"}}
