{"code":"export * from './schemas';\n//# sourceMappingURL=types.js.map","references":["/home/lau/dev-projects/Chocolatine/node_modules/openai/index.d.ts","/home/lau/dev-projects/Chocolatine/packages/data-provider/src/schemas.ts","/home/lau/dev-projects/Chocolatine/packages/data-provider/src/models.ts","/home/lau/dev-projects/Chocolatine/packages/data-provider/src/schemas.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/types.ts\"],\"names\":[],\"mappings\":\"AAOA,cAAc,WAAW,CAAC\"}","dts":{"name":"/home/lau/dev-projects/Chocolatine/packages/data-provider/dist/types/types.d.ts","writeByteOrderMark":false,"text":"import OpenAI from 'openai';\nimport type { TResPlugin, TMessage, TConversation, EModelEndpoint, ImageDetail } from './schemas';\nimport type { TSpecsConfig } from './models';\nexport type TOpenAIMessage = OpenAI.Chat.ChatCompletionMessageParam;\nexport type TOpenAIFunction = OpenAI.Chat.ChatCompletionCreateParams.Function;\nexport type TOpenAIFunctionCall = OpenAI.Chat.ChatCompletionCreateParams.FunctionCallOption;\nexport * from './schemas';\nexport type TMessages = TMessage[];\nexport type TMessagesAtom = TMessages | null;\nexport type TEndpointOption = {\n    endpoint: EModelEndpoint;\n    endpointType?: EModelEndpoint;\n    modelDisplayLabel?: string;\n    resendFiles?: boolean;\n    maxContextTokens?: number;\n    imageDetail?: ImageDetail;\n    model?: string | null;\n    promptPrefix?: string;\n    temperature?: number;\n    chatGptLabel?: string | null;\n    modelLabel?: string | null;\n    jailbreak?: boolean;\n    key?: string | null;\n    thread_id?: string;\n};\nexport type TSubmission = {\n    plugin?: TResPlugin;\n    plugins?: TResPlugin[];\n    message: TMessage;\n    isEdited?: boolean;\n    isContinued?: boolean;\n    messages: TMessage[];\n    isRegenerate?: boolean;\n    conversationId?: string;\n    initialResponse: TMessage;\n    conversation: Partial<TConversation>;\n    endpointOption: TEndpointOption;\n};\nexport type TPluginAction = {\n    pluginKey: string;\n    action: 'install' | 'uninstall';\n    auth?: unknown;\n    isAssistantTool?: boolean;\n};\nexport type GroupedConversations = [key: string, TConversation[]][];\nexport type TUpdateUserPlugins = {\n    isAssistantTool?: boolean;\n    pluginKey: string;\n    action: string;\n    auth?: unknown;\n};\nexport type TError = {\n    message: string;\n    code?: number;\n    response?: {\n        data?: {\n            message?: string;\n        };\n        status?: number;\n    };\n};\nexport type TUser = {\n    id: string;\n    username: string;\n    email: string;\n    name: string;\n    avatar: string;\n    role: string;\n    provider: string;\n    plugins: string[];\n    createdAt: string;\n    updatedAt: string;\n};\nexport type TRole = {\n    role: string;\n};\nexport type TFeedBack = {\n    messageId: string;\n    message: string;\n    feedback: boolean;\n};\nexport type TUserComments = {\n    comments: string;\n    date: Date;\n};\nexport type TGetTokenUsage = {\n    email: string;\n    tokenCount: number;\n};\nexport type TSkill = {\n    subject: string;\n    skill: string;\n    count: number;\n};\nexport type TGetConversationsResponse = {\n    conversations: TConversation[];\n    pageNumber: string;\n    pageSize: string | number;\n    pages: string | number;\n};\nexport type TUpdateMessageRequest = {\n    conversationId: string;\n    messageId: string;\n    model: string;\n    text: string;\n};\nexport type TUpdateUserKeyRequest = {\n    name: string;\n    value: string;\n    expiresAt: string;\n};\nexport type TUpdateConversationRequest = {\n    conversationId: string;\n    title: string;\n};\nexport type TUpdateConversationResponse = TConversation;\nexport type TDeleteConversationRequest = {\n    conversationId?: string;\n    thread_id?: string;\n    source?: string;\n};\nexport type TDeleteConversationResponse = {\n    acknowledged: boolean;\n    deletedCount: number;\n    messages: {\n        acknowledged: boolean;\n        deletedCount: number;\n    };\n};\nexport type TArchiveConversationRequest = {\n    conversationId: string;\n    isArchived: boolean;\n};\nexport type TArchiveConversationResponse = TConversation;\nexport type TForkConvoRequest = {\n    messageId: string;\n    conversationId: string;\n    option?: string;\n    splitAtTarget?: boolean;\n    latestMessageId?: string;\n};\nexport type TForkConvoResponse = {\n    conversation: TConversation;\n    messages: TMessage[];\n};\nexport type TSearchResults = {\n    conversations: TConversation[];\n    messages: TMessage[];\n    pageNumber: string;\n    pageSize: string | number;\n    pages: string | number;\n    filter: object;\n};\nexport type TConfig = {\n    order: number;\n    type?: EModelEndpoint;\n    azure?: boolean;\n    availableTools?: [];\n    plugins?: Record<string, string>;\n    name?: string;\n    iconURL?: string;\n    modelDisplayLabel?: string;\n    userProvide?: boolean | null;\n    userProvideURL?: boolean | null;\n    disableBuilder?: boolean;\n    retrievalModels?: string[];\n    capabilities?: string[];\n};\nexport type TEndpointsConfig = Record<EModelEndpoint | string, TConfig | null | undefined> | undefined;\nexport type TModelsConfig = Record<string, string[]>;\nexport type TUpdateTokenCountResponse = {\n    count: number;\n};\nexport type TMessageTreeNode = object;\nexport type TSearchMessage = object;\nexport type TSearchMessageTreeNode = object;\nexport type TRegisterUser = {\n    name: string;\n    email: string;\n    username: string;\n    password: string;\n    confirm_password?: string;\n};\nexport type TLoginUser = {\n    email: string;\n    password: string;\n};\nexport type TLoginResponse = {\n    token: string;\n    user: TUser;\n};\nexport type TRequestPasswordReset = {\n    email: string;\n};\nexport type TResetPassword = {\n    userId: string;\n    token: string;\n    password: string;\n    confirm_password?: string;\n};\nexport type TInterfaceConfig = {\n    privacyPolicy?: {\n        externalUrl?: string;\n        openNewTab?: boolean;\n    };\n    termsOfService?: {\n        externalUrl?: string;\n        openNewTab?: boolean;\n    };\n    endpointsMenu: boolean;\n    modelSelect: boolean;\n    parameters: boolean;\n    sidePanel: boolean;\n    presets: boolean;\n};\nexport type TStartupConfig = {\n    appTitle: string;\n    socialLogins?: string[];\n    interface?: TInterfaceConfig;\n    discordLoginEnabled: boolean;\n    facebookLoginEnabled: boolean;\n    githubLoginEnabled: boolean;\n    googleLoginEnabled: boolean;\n    openidLoginEnabled: boolean;\n    openidLabel: string;\n    openidImageUrl: string;\n    serverDomain: string;\n    emailLoginEnabled: boolean;\n    registrationEnabled: boolean;\n    socialLoginEnabled: boolean;\n    emailEnabled: boolean;\n    checkBalance: boolean;\n    showBirthdayIcon: boolean;\n    helpAndFaqURL: string;\n    customFooter?: string;\n    modelSpecs?: TSpecsConfig;\n};\nexport type TRefreshTokenResponse = {\n    token: string;\n    user: TUser;\n};\nexport type TCheckUserKeyResponse = {\n    expiresAt: string;\n};\nexport type TRequestPasswordResetResponse = {\n    link?: string;\n    message?: string;\n};\n/**\n * Represents the response from the import endpoint.\n */\nexport type TImportStartResponse = {\n    /**\n     * The message associated with the response.\n     */\n    message: string;\n    /**\n     * The ID of the job associated with the import.\n     */\n    jobId: string;\n};\n/**\n * Represents the status of an import job.\n */\nexport type TImportJobStatus = {\n    /**\n     * The name of the job.\n     */\n    name: string;\n    /**\n     * The ID of the job.\n     */\n    id: string;\n    /**\n     * The status of the job.\n     */\n    status: 'scheduled' | 'running' | 'completed' | 'failed';\n    /**\n     * The reason the job failed, if applicable.\n     */\n    failReason?: string;\n};\n"}}
